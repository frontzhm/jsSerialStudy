js:运行在客户端的轻量级的一门脚本编程语言
但其实,js目前不仅在浏览器中,还可以在node中运行

1.什么是node
node是一个环境,供js代码执行的环境,我们可以把它等价于浏览器,不过我们一般都会把node这个环境安装到服务器端,这样的话,我们可以在服务器端使用js编写程序了,也就是js不仅是客户端语言,也可以是服务器端语言

2.node && 浏览器
->node采用的是谷歌的v8引擎来渲染js的(运行的速度快,稳定,我们编写的js代码不用考虑兼容),
->浏览器中的全局js对象是window,而node环境下得全局js对象是Global
->浏览器是安装在客户端的,为了保护客户端的安全,基本上不可能提供用js对客户电脑磁盘上的文件进行操作的功能
但是node环境中提供对应的I/O操作(服务器上文件的操作,增删改查),我们使用js可以对服务器磁盘下的文件进行增删改查.
->浏览器给js提供ECMA,DOM,BOM(可能理解有误),node提供给js很多新的方法:http.createServer,fs.writeFilleSync,fs.readFileSync...
->node是基于事件驱动的,异步编程(我们在node环境下编写的js程序,一般都是异步编程的)

3.如何让js代码在node中执行?
->利用webstrom嵌入node的机制,直接把编写的js通过右键"run x.js"在node环境中执行(不建议这么使用,因为有些时候webstorm会缓存,我最新执行的操作其实可能会运行前几次的缓存)

->在命令窗口执行:在js文件所在的文件夹里运行cmd,node test.js就可以呈现结果
在node中执行js代码和浏览器中执行一样,如果js代码发生了修改,想要看到最新的效果,需要重新的执行对应的js文件,也就是 在运行一次 node test.js

这也是常用的方法

->可以在命令窗口中执行node操作,然后开始编写对应的js代码测试即可(RPEL命令操作),类似于在控制台里写js
停止的话 按两次ctrl+c

4.node模块
->内置模块(node环境天生提供的):http(createServer..),fs(writeFileSync,readFileSync..),url...

->自定义模块:我们自己定义的模块
在node环境中,我们在当前的项目下创建一个JS文件,就相当于创建了一个模块,例如:新建一个a.js,相当于创建了a模块
如果需要提供一些方法给其他模块使用,则需要通过module.exports把方法导出,例如在A模块中写了module.exports = {fn:fn}/module.exports.fn = fn
如果现在B模块中使用,我们需要先导入 var a = require("./a"),这样的话我们就可以调取a模块中导出的方法,a.fn()

->第三方模块:别人写好的模块 我们拿来使用,在node中我们如果需要使用别人的模块,需要使用npm这个命令进行管理(https://www.npmjs.com)
安装:npm install 第三方模块名称 -g(安装到全局环境中,npm install less -g)
卸载:npm uninstall 第三方模块名称 -g
安装成功后在js中通过,var less = require("./less");把刚才安装的第三方模块导入到js中,这样的话我们就可以使用这个模块中提供的方法了 (less.render...)

5.(server.js)服务创建成功后,如何向服务器端发送请求?
两种方式:
->浏览器中输入 http://localhost:端口号(默认端口号是80)
// 重新执行 node server.js (在浏览器地址栏输入localhost,再看dos)
->浏览器中输入http:本机的ip地址:端口号 (用ip地址的必须联网)



练习:
a sum任意数求和
b sum传递一个数进来 返回的是传递进来的这个数和100的乘积
c 需要先调取A中的sum求出1-4的和,然后调取b模块的方法乘以100,最后在c中输出
